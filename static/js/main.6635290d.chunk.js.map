{"version":3,"sources":["components/card-component/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.tsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","key","children","id","alt","concat","src","name","email","CardList","monsterArr","monsters","Array","isArray","length","map","monster","card_component_Card","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_component_SearchBox","card_list_component_CardList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAGaA,eAAO,SAAAC,GAEhB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBC,IAAKL,EAAMM,SAASC,IAGhDN,EAAAC,EAAAC,cAAA,OAAKK,IAAG,UAAAC,OAAYT,EAAMM,SAASC,IAC9BG,IAAG,wBAAAD,OAA0BT,EAAMM,SAASC,GAAzC,4BAGRN,EAAAC,EAAAC,cAAA,MAAIE,IAAKL,EAAMM,SAASC,IAAKP,EAAMM,SAASK,MAC5CV,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAIH,EAAMM,SAASM,WCTtBC,SAAW,SAAAb,GAEpB,IAAMc,EAAad,EAAMe,SAEzB,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAGPY,MAAMC,QAAQH,IAAeA,EAAWI,OAAS,GAAKJ,EAAWK,IAAI,SAAAC,GAAO,OACxEnB,EAAAC,EAAAC,cAACkB,EAAD,CAAMhB,IAAKe,EAAQb,IAAKa,QCP/BE,SAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,aAAf,OAErBxB,EAAAC,EAAAC,cAAA,SAAOuB,KAAK,SAAStB,UAAU,SAASoB,YAAaA,EAAaG,SAAUF,MCsCjEG,cAxCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaJP,aAAe,SAACW,GACZP,EAAKQ,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrCX,EAAKY,MAAQ,CACT1B,SAAU,GACVuB,YAAa,IAJPT,mFAQM,IAAAa,EAAAV,KAChBW,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAACtB,SAAUgC,uCAOvC,IAAAC,EAE2BhB,KAAKS,MAA9B1B,EAFFiC,EAEEjC,SAAUuB,EAFZU,EAEYV,YAEXW,EAAmBlC,EAASmC,OAAO,SAAAnC,GAAQ,OAAIA,EAASJ,KAAKwC,cAAcC,SAASd,EAAYa,iBAQtG,OACIlD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACkD,EAAD,CAAW7B,YAAa,iBAAkBC,aAAcO,KAAKP,eAC7DxB,EAAAC,EAAAC,cAACmD,EAAD,CAAUvC,SAAUkC,YApClBM,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.6635290d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = props  => {\r\n\r\n    return (\r\n        <div className=\"card-container\" key={props.children.id}>\r\n\r\n            {/* MONSTER IMAGE */}\r\n            <img alt={`monster${props.children.id}`}\r\n                 src={`https://robohash.org/${props.children.id}?set=set2&size=180x180`}/>\r\n\r\n            {/* MONSTER DATA */}\r\n            <h2 key={props.children.id}>{props.children.name}</h2>\r\n            <h3><p>{props.children.email}</p></h3>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Card} from '../card-component/card.component'\r\nimport './card-list.styles.css'\r\n\r\n\r\nexport const CardList = props => {\r\n\r\n    const monsterArr = props.monsters\r\n\r\n    return (\r\n        <div className=\"card-list\">\r\n            {/* MONSTER MAPPER */}\r\n            {\r\n                Array.isArray(monsterArr) && monsterArr.length > 0 && monsterArr.map(monster =>\r\n                    <Card key={monster.id}>{monster}</Card>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\n// functional component usually render some html code\r\n// gets some props and returns a html code\r\n\r\n// @ts-ignore\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    // @ts-ignore\r\n    <input type='search' className=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n)\r\n","import React from 'react'\nimport './App.css'\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            monsters: [],\n            searchField: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({monsters: users}))\n    }\n\n    handleChange = (e) => {\n        this.setState({searchField: e.target.value})\n    }\n\n    render() {\n\n        const {monsters, searchField} = this.state\n\n        const filteredMonsters = monsters.filter(monsters => monsters.name.toLowerCase().includes(searchField.toLowerCase()))\n\n        // const valueToPass = this.state.monsters\n\n        const handleSearchString = (e) => {\n            this.setState({searchField: e.target.value}, () => console.log(this.state))\n        }\n\n        return (\n            <div className=\"App\">\n                <h1>Monster Rolodex</h1>\n                <SearchBox placeholder={'Search monters'} handleChange={this.handleChange}/>\n                <CardList monsters={filteredMonsters}/>\n            </div>\n        )\n    }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}